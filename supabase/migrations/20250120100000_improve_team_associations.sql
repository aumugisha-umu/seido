-- =============================================================================
-- MIGRATION: AM√âLIORATION DES ASSOCIATIONS D'√âQUIPES
-- =============================================================================
-- Cette migration am√©liore les associations entre les utilisateurs, √©quipes et ressources
-- pour garantir que tous les √©l√©ments cr√©√©s par un membre d'√©quipe soient accessibles
-- aux autres membres de la m√™me √©quipe.

-- =============================================================================
-- 1. AM√âLIORATION DES FONCTIONS D'√âQUIPE
-- =============================================================================

-- Fonction pour obtenir automatiquement l'√©quipe principale d'un utilisateur
CREATE OR REPLACE FUNCTION get_user_primary_team(user_uuid UUID)
RETURNS UUID AS $$
DECLARE
    primary_team_id UUID;
BEGIN
    -- R√©cup√©rer la premi√®re √©quipe de l'utilisateur (par date de cr√©ation)
    SELECT tm.team_id INTO primary_team_id
    FROM team_members tm
    INNER JOIN teams t ON t.id = tm.team_id
    WHERE tm.user_id = user_uuid
    ORDER BY tm.joined_at ASC, t.created_at ASC
    LIMIT 1;
    
    RETURN primary_team_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Fonction pour s'assurer qu'un utilisateur a une √©quipe
CREATE OR REPLACE FUNCTION ensure_user_has_team()
RETURNS TRIGGER AS $$
DECLARE
    team_uuid UUID;
    user_name TEXT;
BEGIN
    -- V√©rifier si l'utilisateur est gestionnaire et n'a pas encore d'√©quipe
    IF NEW.role = 'gestionnaire' THEN
        -- V√©rifier s'il a d√©j√† une √©quipe
        SELECT get_user_primary_team(NEW.id) INTO team_uuid;
        
        IF team_uuid IS NULL THEN
            -- Cr√©er une √©quipe personnelle pour le gestionnaire
            SELECT NEW.name INTO user_name;
            
            INSERT INTO teams (name, description, created_by)
            VALUES (
                '√âquipe de ' || user_name,
                '√âquipe personnelle de ' || user_name,
                NEW.id
            )
            RETURNING id INTO team_uuid;
            
            -- Ajouter l'utilisateur comme admin de son √©quipe
            INSERT INTO team_members (team_id, user_id, role)
            VALUES (team_uuid, NEW.id, 'admin');
            
            RAISE NOTICE '√âquipe personnelle cr√©√©e pour %: %', user_name, team_uuid;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Appliquer le trigger sur les nouveaux utilisateurs gestionnaires
DROP TRIGGER IF EXISTS ensure_user_has_team_trigger ON users;
CREATE TRIGGER ensure_user_has_team_trigger
    AFTER INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION ensure_user_has_team();

-- =============================================================================
-- 2. FONCTIONS POUR AUTO-ASSIGNATION D'√âQUIPE
-- =============================================================================

-- Fonction pour auto-assigner l'√©quipe lors de la cr√©ation d'un contact
CREATE OR REPLACE FUNCTION auto_assign_contact_team()
RETURNS TRIGGER AS $$
DECLARE
    creator_team_id UUID;
BEGIN
    -- Si team_id n'est pas sp√©cifi√©, utiliser l'√©quipe de l'utilisateur cr√©ateur
    IF NEW.team_id IS NULL THEN
        -- R√©cup√©rer l'√©quipe principale de l'utilisateur auth actuel
        SELECT get_user_primary_team(auth.uid()) INTO creator_team_id;
        
        IF creator_team_id IS NOT NULL THEN
            NEW.team_id := creator_team_id;
            RAISE NOTICE 'Contact auto-assign√© √† l''√©quipe: %', creator_team_id;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Appliquer le trigger sur les contacts
DROP TRIGGER IF EXISTS auto_assign_contact_team_trigger ON contacts;
CREATE TRIGGER auto_assign_contact_team_trigger
    BEFORE INSERT ON contacts
    FOR EACH ROW
    EXECUTE FUNCTION auto_assign_contact_team();

-- Fonction pour auto-assigner l'√©quipe lors de la cr√©ation d'un b√¢timent
CREATE OR REPLACE FUNCTION auto_assign_building_team()
RETURNS TRIGGER AS $$
DECLARE
    creator_team_id UUID;
BEGIN
    -- Si team_id n'est pas sp√©cifi√©, utiliser l'√©quipe de l'utilisateur cr√©ateur
    IF NEW.team_id IS NULL THEN
        -- R√©cup√©rer l'√©quipe principale de l'utilisateur auth actuel
        SELECT get_user_primary_team(auth.uid()) INTO creator_team_id;
        
        IF creator_team_id IS NOT NULL THEN
            NEW.team_id := creator_team_id;
            RAISE NOTICE 'B√¢timent auto-assign√© √† l''√©quipe: %', creator_team_id;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Appliquer le trigger sur les b√¢timents
DROP TRIGGER IF EXISTS auto_assign_building_team_trigger ON buildings;
CREATE TRIGGER auto_assign_building_team_trigger
    BEFORE INSERT ON buildings
    FOR EACH ROW
    EXECUTE FUNCTION auto_assign_building_team();

-- =============================================================================
-- 3. AM√âLIORATION DES FONCTIONS EXISTANTES
-- =============================================================================

-- Am√©liorer la fonction get_user_teams pour une meilleure performance
CREATE OR REPLACE FUNCTION get_user_teams_enhanced(user_uuid UUID)
RETURNS TABLE (
    team_id UUID,
    team_name VARCHAR,
    user_role VARCHAR,
    team_description TEXT,
    joined_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        t.id,
        t.name,
        tm.role,
        t.description,
        tm.joined_at
    FROM teams t
    INNER JOIN team_members tm ON t.id = tm.team_id
    WHERE tm.user_id = user_uuid
    ORDER BY tm.joined_at ASC, t.created_at ASC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =============================================================================
-- 4. MISE √Ä JOUR DES DONN√âES EXISTANTES
-- =============================================================================

-- Mettre √† jour les contacts existants sans √©quipe
DO $$
DECLARE
    contact_record RECORD;
    user_team_id UUID;
BEGIN
    -- Pour chaque contact sans √©quipe, essayer de l'assigner √† une √©quipe
    FOR contact_record IN 
        SELECT * FROM contacts WHERE team_id IS NULL
    LOOP
        -- Chercher un gestionnaire qui pourrait "poss√©der" ce contact
        -- (logique simple : premier gestionnaire trouv√©)
        SELECT get_user_primary_team(u.id) INTO user_team_id
        FROM users u 
        WHERE u.role = 'gestionnaire'
        LIMIT 1;
        
        IF user_team_id IS NOT NULL THEN
            UPDATE contacts 
            SET team_id = user_team_id 
            WHERE id = contact_record.id;
            
            RAISE NOTICE 'Contact % assign√© √† l''√©quipe %', contact_record.name, user_team_id;
        END IF;
    END LOOP;
END $$;

-- Mettre √† jour les b√¢timents existants sans √©quipe
DO $$
DECLARE
    building_record RECORD;
    manager_team_id UUID;
BEGIN
    -- Pour chaque b√¢timent sans √©quipe, l'assigner √† l'√©quipe du manager
    FOR building_record IN 
        SELECT * FROM buildings WHERE team_id IS NULL AND manager_id IS NOT NULL
    LOOP
        SELECT get_user_primary_team(building_record.manager_id) INTO manager_team_id;
        
        IF manager_team_id IS NOT NULL THEN
            UPDATE buildings 
            SET team_id = manager_team_id 
            WHERE id = building_record.id;
            
            RAISE NOTICE 'B√¢timent % assign√© √† l''√©quipe %', building_record.name, manager_team_id;
        END IF;
    END LOOP;
END $$;

-- =============================================================================
-- 5. VALIDATION ET V√âRIFICATIONS
-- =============================================================================

DO $$
DECLARE
    contacts_without_team INTEGER;
    buildings_without_team INTEGER;
    users_without_team INTEGER;
BEGIN
    -- Compter les √©l√©ments sans √©quipe
    SELECT COUNT(*) INTO contacts_without_team FROM contacts WHERE team_id IS NULL;
    SELECT COUNT(*) INTO buildings_without_team FROM buildings WHERE team_id IS NULL;
    SELECT COUNT(*) INTO users_without_team FROM users u 
    WHERE u.role = 'gestionnaire' AND get_user_primary_team(u.id) IS NULL;
    
    RAISE NOTICE '=== VALIDATION POST-MIGRATION ===';
    RAISE NOTICE 'Contacts sans √©quipe: %', contacts_without_team;
    RAISE NOTICE 'B√¢timents sans √©quipe: %', buildings_without_team;
    RAISE NOTICE 'Gestionnaires sans √©quipe: %', users_without_team;
    RAISE NOTICE '';
    
    IF contacts_without_team = 0 AND buildings_without_team = 0 AND users_without_team = 0 THEN
        RAISE NOTICE '‚úÖ Tous les √©l√©ments sont correctement associ√©s aux √©quipes';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Certains √©l√©ments restent sans √©quipe - v√©rification manuelle recommand√©e';
    END IF;
END $$;

-- =============================================================================
-- 6. MESSAGES DE VALIDATION FINALE
-- =============================================================================

DO $$
BEGIN
    RAISE NOTICE '=== MIGRATION AM√âLIORATION √âQUIPES TERMIN√âE ===';
    RAISE NOTICE '‚úÖ Fonctions d''auto-assignation cr√©√©es';
    RAISE NOTICE '‚úÖ Triggers d''association automatique activ√©s';
    RAISE NOTICE '‚úÖ Donn√©es existantes mises √† jour';
    RAISE NOTICE '‚úÖ Fonctions utilitaires am√©lior√©es';
    RAISE NOTICE '';
    RAISE NOTICE 'üéØ Les nouveaux contacts et b√¢timents seront automatiquement';
    RAISE NOTICE '   assign√©s √† l''√©quipe de leur cr√©ateur';
END $$;
