/**
 * üîç BUG DETECTOR - D√©tection de boucles infinies et patterns d'erreurs
 *
 * D√©tecte :
 * - Boucles infinies (m√™me bug r√©p√©t√© > 5 fois)
 * - Patterns d'erreurs r√©currentes
 * - D√©gradations de performance
 */

import { TEST_CONFIG } from '../../config/test-config'
import { LogEntry } from './log-collector'

export interface BugReport {
  bugId: string
  errorMessage: string
  firstOccurrence: string
  occurrences: number
  stack?: string
  metadata?: Record<string, unknown>
}

export interface InfiniteLoopDetection {
  detected: boolean
  bug: BugReport | null
  recommendation: string
}

export class BugDetector {
  private bugHistory: BugReport[] = []
  private maxIterations = TEST_CONFIG.autoHealing.maxIterations

  /**
   * Enregistrer une erreur de test
   */
  recordBug(error: Error, metadata?: Record<string, unknown>): BugReport {
    const bugId = this.generateBugId(error.message)

    // Chercher si ce bug existe d√©j√†
    const existingBug = this.bugHistory.find((b) => b.bugId === bugId)

    if (existingBug) {
      // Incr√©menter le compteur
      existingBug.occurrences++
      existingBug.metadata = { ...existingBug.metadata, ...metadata }
      return existingBug
    }

    // Cr√©er un nouveau rapport de bug
    const newBug: BugReport = {
      bugId,
      errorMessage: error.message,
      firstOccurrence: new Date().toISOString(),
      occurrences: 1,
      stack: error.stack,
      metadata,
    }

    this.bugHistory.push(newBug)
    return newBug
  }

  /**
   * V√©rifier si on est dans une boucle infinie
   */
  detectInfiniteLoop(): InfiniteLoopDetection {
    // Trouver le bug le plus fr√©quent
    const mostFrequentBug = this.bugHistory.reduce(
      (max, bug) => (bug.occurrences > max.occurrences ? bug : max),
      this.bugHistory[0]
    )

    if (!mostFrequentBug) {
      return {
        detected: false,
        bug: null,
        recommendation: '',
      }
    }

    // V√©rifier si le bug est r√©p√©t√© >= maxIterations
    if (mostFrequentBug.occurrences >= this.maxIterations) {
      return {
        detected: true,
        bug: mostFrequentBug,
        recommendation: this.generateRecommendation(mostFrequentBug),
      }
    }

    return {
      detected: false,
      bug: mostFrequentBug,
      recommendation: '',
    }
  }

  /**
   * G√©n√©rer un ID unique pour un bug bas√© sur le message d'erreur
   */
  private generateBugId(errorMessage: string): string {
    // Nettoyer le message pour extraire la partie stable
    const cleaned = errorMessage
      .replace(/\d+/g, 'N') // Remplacer les nombres par N
      .replace(/[\w-]+@[\w-]+\.[\w-]+/g, 'EMAIL') // Remplacer les emails
      .replace(/http:\/\/\S+/g, 'URL') // Remplacer les URLs
      .trim()

    // G√©n√©rer un hash simple
    let hash = 0
    for (let i = 0; i < cleaned.length; i++) {
      const char = cleaned.charCodeAt(i)
      hash = (hash << 5) - hash + char
      hash = hash & hash // Convertir en 32bit integer
    }

    return `BUG-${Math.abs(hash).toString(36).toUpperCase()}`
  }

  /**
   * G√©n√©rer une recommandation pour sortir de la boucle
   */
  private generateRecommendation(bug: BugReport): string {
    const recommendations: string[] = [
      '## üîÑ Boucle Infinie D√©tect√©e',
      '',
      `**Bug ID**: ${bug.bugId}`,
      `**Occurrences**: ${bug.occurrences}/${this.maxIterations}`,
      `**Premi√®re occurrence**: ${bug.firstOccurrence}`,
      '',
      '### Message d\'erreur',
      '```',
      bug.errorMessage,
      '```',
      '',
      '### Stack Trace',
      '```',
      bug.stack || 'N/A',
      '```',
      '',
      '### Recommandations pour d√©bloquer',
      '',
    ]

    // Analyser le type d'erreur et sugg√©rer des solutions
    const errorPatterns = [
      {
        pattern: /timeout|timed out/i,
        solution: `1. V√©rifier que le serveur de dev est d√©marr√©
2. Augmenter les timeouts dans \`test-config.ts\`
3. V√©rifier les logs r√©seau pour identifier le blocage
4. D√©sactiver temporairement l'auto-healing pour debug manuel`,
      },
      {
        pattern: /element not found|locator.*not found/i,
        solution: `1. V√©rifier que le s√©lecteur CSS/XPath est correct
2. Ajouter des \`waitFor\` avant les interactions
3. V√©rifier que la page est compl√®tement charg√©e
4. Capturer un screenshot pour voir l'√©tat de la page`,
      },
      {
        pattern: /navigation|redirect/i,
        solution: `1. V√©rifier les logs serveur pour les redirections
2. V√©rifier middleware.ts pour les r√®gles de redirection
3. Ajouter des logs dans les Server Actions
4. V√©rifier l'√©tat de l'authentification`,
      },
      {
        pattern: /database|supabase|rls/i,
        solution: `1. V√©rifier les logs Supabase pour erreurs SQL
2. V√©rifier les Row Level Security (RLS) policies
3. V√©rifier que l'utilisateur de test existe dans la DB
4. Nettoyer la base de donn√©es de test`,
      },
      {
        pattern: /email|resend/i,
        solution: `1. V√©rifier que RESEND_API_KEY est configur√©
2. V√©rifier les logs d'envoi d'email
3. Activer le mode mock email dans test-config.ts
4. V√©rifier que l'email de test est valide`,
      },
    ]

    // Trouver le pattern correspondant
    const matchedPattern = errorPatterns.find((p) =>
      p.pattern.test(bug.errorMessage)
    )

    if (matchedPattern) {
      recommendations.push(matchedPattern.solution)
    } else {
      recommendations.push(`1. Analyser les logs dans \`${TEST_CONFIG.logging.logDir}\`
2. V√©rifier la stack trace ci-dessus
3. Ex√©cuter le test en mode headed pour observer le comportement
4. Ajouter des logs de debug suppl√©mentaires
5. D√©sactiver temporairement l'auto-healing (\`DISABLE_AUTO_HEALING=true\`)`)
    }

    recommendations.push(
      '',
      '### M√©tadonn√©es',
      '```json',
      JSON.stringify(bug.metadata || {}, null, 2),
      '```',
      '',
      '### Prochaines √©tapes',
      '',
      '1. **Pause manuelle** : Le test s\'est arr√™t√© pour √©viter une boucle infinie',
      '2. **Analyser les logs** : Consulter les logs d√©taill√©s dans le dossier de test',
      '3. **Corriger le probl√®me** : Appliquer les recommandations ci-dessus',
      '4. **Relancer le test** : Une fois le probl√®me corrig√©',
      '',
      '**Action requise** : Intervention manuelle n√©cessaire pour d√©bloquer le test.'
    )

    return recommendations.join('\n')
  }

  /**
   * Analyser les logs pour d√©tecter des patterns
   */
  analyzeLogPatterns(logs: LogEntry[]): {
    patterns: string[]
    severity: 'low' | 'medium' | 'high'
  } {
    const patterns: string[] = []
    let severity: 'low' | 'medium' | 'high' = 'low'

    // Compter les erreurs par type
    const errorCounts: Record<string, number> = {}

    logs
      .filter((log) => log.level === 'error')
      .forEach((log) => {
        const key = log.message.substring(0, 50) // Premier 50 caract√®res
        errorCounts[key] = (errorCounts[key] || 0) + 1
      })

    // D√©tecter les patterns r√©p√©titifs
    Object.entries(errorCounts).forEach(([error, count]) => {
      if (count >= 3) {
        patterns.push(`Erreur r√©p√©t√©e ${count} fois: ${error}`)
        severity = 'high'
      } else if (count >= 2) {
        patterns.push(`Erreur doubl√©e: ${error}`)
        severity = severity === 'high' ? 'high' : 'medium'
      }
    })

    // D√©tecter les timeouts
    const timeouts = logs.filter((log) =>
      /timeout|timed out/i.test(log.message)
    )
    if (timeouts.length > 0) {
      patterns.push(`${timeouts.length} timeout(s) d√©tect√©(s)`)
      severity = 'high'
    }

    // D√©tecter les erreurs r√©seau
    const networkErrors = logs.filter(
      (log) => log.source === 'network' && log.level === 'error'
    )
    if (networkErrors.length > 0) {
      patterns.push(`${networkErrors.length} erreur(s) r√©seau`)
      severity = severity === 'high' ? 'high' : 'medium'
    }

    return { patterns, severity }
  }

  /**
   * Obtenir l'historique complet des bugs
   */
  getBugHistory(): BugReport[] {
    return [...this.bugHistory]
  }

  /**
   * R√©initialiser l'historique
   */
  reset(): void {
    this.bugHistory = []
  }

  /**
   * G√©n√©rer un rapport de tous les bugs
   */
  generateBugReport(): string {
    if (this.bugHistory.length === 0) {
      return '‚úÖ Aucun bug d√©tect√©'
    }

    const report = [
      '# Bug Report',
      '',
      `**Total unique bugs**: ${this.bugHistory.length}`,
      `**Total occurrences**: ${this.bugHistory.reduce((sum, b) => sum + b.occurrences, 0)}`,
      '',
      '## Bugs par fr√©quence',
      '',
    ]

    // Trier par nombre d'occurrences
    const sortedBugs = [...this.bugHistory].sort(
      (a, b) => b.occurrences - a.occurrences
    )

    sortedBugs.forEach((bug, index) => {
      report.push(`### ${index + 1}. ${bug.bugId} (${bug.occurrences}x)`)
      report.push('')
      report.push('**Message**:')
      report.push('```')
      report.push(bug.errorMessage)
      report.push('```')
      report.push('')
      report.push(`**Premi√®re occurrence**: ${bug.firstOccurrence}`)
      report.push('')
    })

    return report.join('\n')
  }
}

/**
 * Factory pour cr√©er un BugDetector
 */
export const createBugDetector = (): BugDetector => {
  return new BugDetector()
}

export default BugDetector
