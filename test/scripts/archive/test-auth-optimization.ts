/**
 * Script de test pour v√©rifier les optimisations de performance auth
 * Ex√©cuter avec: npx tsx scripts/test-auth-optimization.ts
 */

import { readFileSync } from 'fs'
import { join } from 'path'

console.log('\nüîç ========== AUDIT DES OPTIMISATIONS AUTH ==========\n')

// Lire le fichier auth-service.ts
const authServicePath = join(process.cwd(), 'lib', 'auth-service.ts')
const authServiceContent = readFileSync(authServicePath, 'utf-8')

// Analyser les timeouts
const timeoutPattern = /setTimeout.*?(\d+)\)/g
const timeouts: number[] = []
let match

while ((match = timeoutPattern.exec(authServiceContent)) !== null) {
  timeouts.push(parseInt(match[1]))
}

console.log('üìä ANALYSE DES TIMEOUTS:')
console.log('========================\n')

if (timeouts.length === 0) {
  console.log('‚úÖ Aucun setTimeout direct trouv√© - utilisation de withTimeout()')
} else {
  console.log('‚ö†Ô∏è Timeouts trouv√©s:')
  timeouts.forEach((timeout, index) => {
    console.log(`  ${index + 1}. ${timeout}ms`)
  })
}

// V√©rifier l'utilisation de withTimeout
const withTimeoutCount = (authServiceContent.match(/withTimeout\(/g) || []).length
console.log(`\n‚úÖ Utilisations de withTimeout: ${withTimeoutCount}`)

// V√©rifier l'utilisation du cache
const cacheUsage = authServiceContent.includes('profileCache')
console.log(`‚úÖ Cache impl√©ment√©: ${cacheUsage ? 'OUI' : 'NON'}`)

// V√©rifier l'utilisation du tracker de performance
const perfTrackerUsage = authServiceContent.includes('authPerfTracker')
console.log(`‚úÖ Performance tracking: ${perfTrackerUsage ? 'OUI' : 'NON'}`)

// Analyser les patterns de timeout optimis√©s
console.log('\nüìà PATTERNS DE TIMEOUT OPTIMIS√âS:')
console.log('==================================\n')

const timeoutPatterns = [
  { pattern: /withTimeout\([^,]+,\s*(\d+),\s*'Primary/g, name: 'Primary query' },
  { pattern: /withTimeout\([^,]+,\s*(\d+),\s*'Email/g, name: 'Email fallback' },
  { pattern: /withTimeout\([^,]+,\s*(\d+),\s*'Final/g, name: 'Final direct query' }
]

let totalMaxTimeout = 0
timeoutPatterns.forEach(({ pattern, name }) => {
  const matches = [...authServiceContent.matchAll(pattern)]
  if (matches.length > 0) {
    const timeout = parseInt(matches[0][1])
    console.log(`  ${name}: ${timeout}ms`)
    totalMaxTimeout += timeout
  }
})

console.log(`\nüìä R√âSUM√â DES OPTIMISATIONS:`)
console.log('============================\n')

// Calculer l'am√©lioration
const oldTimeout = 14000 // 6s + 4s + 4s
const newTimeout = totalMaxTimeout || 3500 // 2s + 1s + 0.5s

console.log(`üïê Ancien timeout cumul√©: ${oldTimeout}ms (14s)`)
console.log(`‚ö° Nouveau timeout cumul√©: ${newTimeout}ms (${(newTimeout/1000).toFixed(1)}s)`)
console.log(`üìà Am√©lioration: ${((oldTimeout - newTimeout) / oldTimeout * 100).toFixed(1)}%`)
console.log(`üéØ R√©duction: ${oldTimeout - newTimeout}ms √©conomis√©s`)

if (newTimeout <= 2000) {
  console.log('\n‚úÖ OBJECTIF ATTEINT: Time-to-auth < 2s')
} else if (newTimeout <= 4000) {
  console.log('\n‚ö†Ô∏è OBJECTIF PARTIELLEMENT ATTEINT: Time-to-auth < 4s')
} else {
  console.log('\n‚ùå OBJECTIF NON ATTEINT: Time-to-auth encore > 4s')
}

// V√©rifier les fonctionnalit√©s avanc√©es
console.log('\nüîß FONCTIONNALIT√âS AVANC√âES:')
console.log('=============================\n')

const features = [
  { name: 'Cache avec TTL', check: authServiceContent.includes('CACHE_TTL') },
  { name: 'Performance tracking', check: authServiceContent.includes('authPerfTracker.track') },
  { name: 'Clear cache method', check: authServiceContent.includes('clearCache') },
  { name: 'Exponential backoff utils', check: authServiceContent.includes('withExponentialBackoff') },
  { name: 'Performance.now() metrics', check: authServiceContent.includes('performance.now()') }
]

features.forEach(({ name, check }) => {
  console.log(`  ${check ? '‚úÖ' : '‚ùå'} ${name}`)
})

// Score final
const score = features.filter(f => f.check).length
const maxScore = features.length
const percentage = (score / maxScore * 100).toFixed(0)

console.log(`\nüèÜ SCORE D'OPTIMISATION: ${score}/${maxScore} (${percentage}%)`)

if (percentage === '100') {
  console.log('üéâ EXCELLENT! Toutes les optimisations sont impl√©ment√©es.')
} else if (parseInt(percentage) >= 80) {
  console.log('üëç TR√àS BIEN! La plupart des optimisations sont en place.')
} else if (parseInt(percentage) >= 60) {
  console.log('‚ö†Ô∏è ACCEPTABLE! Quelques optimisations manquantes.')
} else {
  console.log('‚ùå INSUFFISANT! Plusieurs optimisations importantes manquent.')
}

console.log('\n‚ú® ========== AUDIT TERMIN√â ==========\n')
