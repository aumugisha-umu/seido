import { redirect } from 'next/navigation'
import { getUserProfile, getDashboardPath } from '@/lib/auth-dal'
import { logger, logError } from '@/lib/logger'

/**
 * üîÑ PAGE DASHBOARD ROUTER - SERVER COMPONENT
 *
 * Bonnes pratiques Next.js 15 :
 * - Redirection imm√©diate server-side selon le r√¥le
 * - Pas de logique client-side complexe
 * - Performance optimale avec redirect()
 * - Force dynamic rendering (session-dependent)
 */

// ‚úÖ Force dynamic rendering - cette page d√©pend toujours de la session utilisateur
export const dynamic = 'force-dynamic'

export default async function DashboardRouter() {
  logger.info('üîÑ [DASHBOARD-ROUTER] Determining user role for redirection...')

  try {
    // ‚úÖ R√©cup√©rer le profil utilisateur avec r√¥le
    const userProfile = await getUserProfile()

    if (!userProfile) {
      logger.info('‚ùå [DASHBOARD-ROUTER] No user profile found, redirecting to login')
      redirect('/auth/login')
    }

    const role = userProfile.profile.role
    const dashboardPath = getDashboardPath(role)

    logger.info('‚úÖ [DASHBOARD-ROUTER] Redirecting user to role-based dashboard:', {
      email: userProfile.profile.email,
      role,
      dashboard: dashboardPath
    })

    // ‚úÖ Redirection imm√©diate server-side selon le r√¥le
    redirect(dashboardPath)

  } catch (error) {
    // ‚úÖ Les redirections Next.js lancent une exception NEXT_REDIRECT - c'est normal
    if (error && typeof error === 'object' && 'digest' in error &&
        typeof error.digest === 'string' && error.digest.startsWith('NEXT_REDIRECT')) {
      // Re-throw pour que Next.js g√®re la redirection
      throw error
    }

    // ‚ùå Erreur r√©elle - logger et rediriger vers login
    logger.error('‚ùå [DASHBOARD-ROUTER] Error determining user role:', error)
    redirect('/auth/login')
  }
}
