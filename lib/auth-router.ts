/**
 * üîê AUTH ROUTER - ROUTING INTELLIGENT PAR R√îLE (Bonnes Pratiques 2025)
 *
 * Syst√®me de routing s√©curis√© avec redirection automatique bas√©e sur :
 * - R√¥le utilisateur
 * - Permissions
 * - √âtat de session
 * - Pages de destination appropri√©es
 * - Data Access Layer (DAL) integration
 */

import type { Database } from './database.types'
import type { AuthUser } from './auth-service'

// Import conditionnel pour √©viter les erreurs c√¥t√© client
let dalFunctions: any = null
if (typeof window === 'undefined') {
  // C√¥t√© serveur uniquement
  try {
    dalFunctions = require('./dal')
  } catch (error) {
    console.warn('DAL server functions not available')
  }
}

export type UserRole = Database['public']['Enums']['user_role']

// Configuration des routes par r√¥le (Bonnes Pratiques 2025)
export const ROLE_ROUTES = {
  admin: {
    dashboard: '/admin',
    default: '/admin',
    allowed: ['/admin', '/gestionnaire', '/prestataire', '/locataire'] // Admin peut tout voir
  },
  gestionnaire: {
    dashboard: '/gestionnaire',
    default: '/gestionnaire/dashboard',
    allowed: ['/gestionnaire']
  },
  prestataire: {
    dashboard: '/prestataire',
    default: '/prestataire/dashboard',
    allowed: ['/prestataire']
  },
  locataire: {
    dashboard: '/locataire',
    default: '/locataire/dashboard',
    allowed: ['/locataire']
  }
} as const

// Routes publiques (accessibles sans authentification)
export const PUBLIC_ROUTES = [
  '/',
  '/auth/login',
  '/auth/signup',
  '/auth/signup-success',
  '/auth/reset-password',
  '/auth/update-password',
  '/auth/callback',
  '/auth/unauthorized'
] as const

// Routes syst√®me (toujours accessibles)
export const SYSTEM_ROUTES = [
  '/api',
  '/debug',
  '/_next',
  '/favicon.ico'
] as const

export interface AuthRoutingConfig {
  bypassRedirections: boolean
  currentPath: string
  isAuthPage: boolean
  isCallbackPage: boolean
  isResetPasswordPage: boolean
}

/**
 * D√©termine le dashboard appropri√© selon le r√¥le utilisateur (Compatible 2025)
 */
export const getDashboardPath = (userRole: string): string => {
  const roleConfig = ROLE_ROUTES[userRole as UserRole]
  return roleConfig?.default || '/gestionnaire/dashboard'
}

/**
 * D√©termine si une redirection automatique est n√©cessaire et autoris√©e
 */
export const shouldRedirectAfterAuth = (
  user: AuthUser | null,
  config: AuthRoutingConfig
): { shouldRedirect: boolean; targetPath?: string; reason: string } => {
  
  // Pas d'utilisateur = pas de redirection
  if (!user) {
    return {
      shouldRedirect: false,
      reason: 'No authenticated user'
    }
  }
  
  // Bypass explicite des redirections (pour √©viter les boucles)
  if (config.bypassRedirections) {
    return {
      shouldRedirect: false,
      reason: 'Redirections bypassed'
    }
  }
  
  // Pas de redirection sur les pages callback/reset (process en cours)
  if (config.isCallbackPage || config.isResetPasswordPage) {
    return {
      shouldRedirect: false,
      reason: 'Callback/reset page - process in progress'
    }
  }
  
  // Redirection uniquement si on est sur une page d'auth
  if (config.isAuthPage) {
    const targetPath = getDashboardPath(user.role)
    return {
      shouldRedirect: true,
      targetPath,
      reason: `User authenticated on auth page - redirect to ${user.role} dashboard`
    }
  }
  
  return {
    shouldRedirect: false,
    reason: 'User on protected page - no redirect needed'
  }
}

/**
 * Cr√©er la configuration de routage depuis le pathname
 */
export const createAuthRoutingConfig = (pathname: string): AuthRoutingConfig => {
  // ‚úÖ NOUVEAU: Exclure les pages de configuration du mot de passe des redirections auth
  const isAuthPage = pathname.startsWith('/auth/') &&
                     !pathname.includes('/auth/set-password') &&
                     !pathname.includes('/auth/update-password')
  const isCallbackPage = pathname.includes('/auth/callback')
  const isResetPasswordPage = pathname.includes('/auth/reset-password')

  return {
    bypassRedirections: false, // Par d√©faut, permettre les redirections
    currentPath: pathname,
    isAuthPage,
    isCallbackPage,
    isResetPasswordPage
  }
}

/**
 * Types pour les strat√©gies de redirection
 */
export type RedirectionStrategy = 'immediate' | 'middleware-only' | 'none'

export interface RedirectionDecision {
  strategy: RedirectionStrategy
  targetPath?: string
  reason: string
  delayMs?: number
}

/**
 * üéØ FONCTION PRINCIPALE - D√©cider de la strat√©gie de redirection
 * 
 * Cette fonction centralise toute la logique de d√©cision pour √©viter
 * les conflits entre Auth Provider, middleware, et pages.
 */
export const decideRedirectionStrategy = (
  user: AuthUser | null,
  pathname: string,
  context: {
    isLoginSubmit?: boolean
    isAuthStateChange?: boolean  
    isMiddlewareEval?: boolean
  } = {}
): RedirectionDecision => {
  
  const config = createAuthRoutingConfig(pathname)
  const { shouldRedirect, targetPath, reason } = shouldRedirectAfterAuth(user, config)
  
  if (!shouldRedirect) {
    return {
      strategy: 'none',
      reason
    }
  }
  
  // üéØ STRAT√âGIE BAS√âE SUR LE CONTEXTE
  
  if (context.isLoginSubmit) {
    // Apr√®s soumission login ‚Üí Laisser le middleware g√©rer  
    // √âvite la race condition avec Auth Provider
    return {
      strategy: 'middleware-only',
      targetPath,
      reason: 'Login submit - let middleware handle redirection',
      delayMs: 100 // Petit d√©lai pour laisser les cookies se synchroniser
    }
  }
  
  if (context.isAuthStateChange && !context.isLoginSubmit) {
    // Auth state change sans login (ex: refresh page) ‚Üí Redirection imm√©diate OK
    return {
      strategy: 'immediate',
      targetPath,
      reason: 'Auth state restored - safe to redirect immediately'
    }
  }
  
  if (context.isMiddlewareEval) {
    // √âvaluation middleware ‚Üí Redirection serveur
    return {
      strategy: 'immediate',
      targetPath, 
      reason: 'Middleware evaluation - server-side redirect'
    }
  }
  
  // Cas par d√©faut ‚Üí Pas de redirection pour √©viter les conflits
  return {
    strategy: 'none',
    reason: 'Default case - avoid potential conflicts'
  }
}

/**
 * V√©rifier si on est dans un √©tat de transition auth
 */
export const isInAuthTransition = (pathname: string): boolean => {
  return pathname.includes('/auth/callback') || 
         pathname.includes('/auth/signup-success') ||
         pathname.includes('/auth/reset-password')
}

/**
 * Logger pour debug des d√©cisions de routage
 */
export const logRoutingDecision = (
  decision: RedirectionDecision,
  user: AuthUser | null,
  context: any
) => {
  console.log('üéØ [AUTH-ROUTER] Redirection decision:', {
    strategy: decision.strategy,
    targetPath: decision.targetPath,
    reason: decision.reason,
    user: user ? `${user.name} (${user.role})` : null,
    context
  })
}

// ‚úÖ NOUVELLES FONCTIONS BONNES PRATIQUES 2025

/**
 * V√©rifie si l'utilisateur peut acc√©der √† une route donn√©e (DAL Integration - Server Only)
 */
export async function canAccessRoute(pathname: string): Promise<{ canAccess: boolean; redirectTo?: string; user?: any }> {
  try {
    // Routes publiques ‚Üí toujours autoris√©es
    if (PUBLIC_ROUTES.some(route => pathname === route)) {
      return { canAccess: true }
    }

    // Routes syst√®me ‚Üí toujours autoris√©es
    if (SYSTEM_ROUTES.some(route => pathname.startsWith(route))) {
      return { canAccess: true }
    }

    // V√©rification c√¥t√© serveur uniquement
    if (typeof window !== 'undefined' || !dalFunctions) {
      console.log('üö´ [AUTH-ROUTER] Client-side access check not supported')
      return { canAccess: false, redirectTo: '/auth/login' }
    }

    // V√©rifier la session avec DAL (c√¥t√© serveur)
    const { isValid, user } = await dalFunctions.verifySession()

    if (!isValid || !user) {
      console.log(`üö´ [AUTH-ROUTER] No valid session for ${pathname}`)
      return { canAccess: false, redirectTo: '/auth/login' }
    }

    // V√©rifier les permissions pour la route
    const userRoleConfig = ROLE_ROUTES[user.role]
    if (!userRoleConfig) {
      console.log(`üö´ [AUTH-ROUTER] Unknown role ${user.role} for ${pathname}`)
      return { canAccess: false, redirectTo: '/auth/unauthorized' }
    }

    // V√©rifier si l'utilisateur peut acc√©der √† cette route
    const hasAccess = userRoleConfig.allowed.some(allowedRoute =>
      pathname.startsWith(allowedRoute)
    )

    if (!hasAccess) {
      console.log(`üö´ [AUTH-ROUTER] User ${user.role} cannot access ${pathname}`)
      const redirectTo = userRoleConfig.default
      return { canAccess: false, redirectTo, user }
    }

    console.log(`‚úÖ [AUTH-ROUTER] User ${user.role} can access ${pathname}`)
    return { canAccess: true, user }
  } catch (error) {
    console.error('‚ùå [AUTH-ROUTER] Route access check failed:', error)
    return { canAccess: false, redirectTo: '/auth/login' }
  }
}

/**
 * Protection de route c√¥t√© serveur - √† utiliser dans les layouts
 */
export async function protectRoute(pathname: string): Promise<{ user: any }> {
  if (typeof window !== 'undefined') {
    throw new Error('protectRoute can only be used server-side')
  }

  const { canAccess, redirectTo, user } = await canAccessRoute(pathname)

  if (!canAccess && redirectTo && dalFunctions) {
    console.log(`üîÑ [AUTH-ROUTER] Redirecting ${pathname} ‚Üí ${redirectTo}`)
    dalFunctions.redirect(redirectTo)
  }

  return { user }
}

/**
 * Gestion des redirections post-authentification (Mise √† jour 2025)
 */
export function getPostAuthRedirect(role: UserRole, intendedPath?: string): string {
  const roleConfig = ROLE_ROUTES[role]

  if (!roleConfig) {
    console.warn(`‚ö†Ô∏è [AUTH-ROUTER] Unknown role ${role}, using default`)
    return '/auth/login'
  }

  // Si l'utilisateur avait une destination pr√©vue ET qu'il peut y acc√©der
  if (intendedPath && roleConfig.allowed.some(allowed => intendedPath.startsWith(allowed))) {
    console.log(`üìç [AUTH-ROUTER] Redirecting ${role} to intended path: ${intendedPath}`)
    return intendedPath
  }

  // Sinon, redirection vers dashboard par d√©faut
  console.log(`üìç [AUTH-ROUTER] Redirecting ${role} to default dashboard: ${roleConfig.default}`)
  return roleConfig.default
}

/**
 * Middleware helper pour v√©rification rapide (Optimisation 2025)
 */
export function shouldRedirectToLogin(pathname: string, hasAuthCookie: boolean): boolean {
  // Routes publiques ‚Üí pas de redirection
  if (PUBLIC_ROUTES.some(route => pathname === route)) {
    return false
  }

  // Routes syst√®me ‚Üí pas de redirection
  if (SYSTEM_ROUTES.some(route => pathname.startsWith(route))) {
    return false
  }

  // Routes prot√©g√©es sans cookie ‚Üí redirection
  const isProtectedRoute = Object.values(ROLE_ROUTES)
    .some(config => config.allowed.some(allowed => pathname.startsWith(allowed)))

  return isProtectedRoute && !hasAuthCookie
}
