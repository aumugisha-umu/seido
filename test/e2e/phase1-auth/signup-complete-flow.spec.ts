/**
 * Test E2E Complet - Signup ‚Üí Confirmation ‚Üí Login ‚Üí Dashboard
 * Mode: VISIBLE (headed) pour suivre chaque √©tape
 */

import { test, expect } from '@playwright/test'

// G√©n√©rer un email unique pour chaque test
const testEmail = `arthur+test-${Date.now()}@seido.pm`
const testPassword = 'TestComplete2025!'
const testFirstName = 'Arthur'
const testLastName = 'TestComplete'

// Variable pour stocker le lien de confirmation
let confirmationUrl = ''

test.describe('üöÄ Signup Complet E2E - Mode Visible', () => {
  test('Cr√©er compte ‚Üí Confirmer email ‚Üí Login ‚Üí Dashboard', async ({ page }) => {
    console.log(`\n${'='.repeat(60)}`)
    console.log(`üß™ TEST E2E COMPLET - SIGNUP FLOW`)
    console.log(`${'='.repeat(60)}`)
    console.log(`üìß Test email: ${testEmail}`)
    console.log(`üîë Test password: ${testPassword}`)
    console.log(`${'='.repeat(60)}\n`)

    // ========================================
    // CONFIGURATION: Capturer les logs serveur
    // ========================================
    page.on('console', msg => {
      const text = msg.text()

      // Capturer le lien de confirmation depuis les logs
      if (text.includes('üîó [SIGNUP-ACTION] Built confirmation URL')) {
        console.log(`\nüìã [CONSOLE-LOG] ${text}`)
      }

      // Capturer l'URL de confirmation construite
      const confirmMatch = text.match(/internalConfirmUrl['"]\s*:\s*['"](http[^'"]+)/)
      if (confirmMatch) {
        confirmationUrl = confirmMatch[1]
        console.log(`\n‚úÖ [CONFIRMATION-URL-CAPTURED] ${confirmationUrl}\n`)
      }

      // Logger tous les messages importants
      if (text.includes('[SIGNUP-ACTION]') ||
          text.includes('[AUTH-CONFIRM]') ||
          text.includes('[LOGIN-ACTION]') ||
          text.includes('‚úÖ') ||
          text.includes('‚ùå')) {
        console.log(`üìã ${text}`)
      }
    })

    // Capturer les erreurs de page
    page.on('pageerror', error => {
      console.error(`‚ùå [PAGE-ERROR] ${error.message}`)
    })

    // Capturer les requ√™tes r√©seau (pour voir les appels API)
    page.on('response', async response => {
      const url = response.url()
      if (url.includes('/auth/signup') ||
          url.includes('/auth/confirm') ||
          url.includes('/auth/login')) {
        const status = response.status()
        console.log(`üåê [API] ${status} ${url}`)
      }
    })

    // ========================================
    // √âTAPE 1: SIGNUP - Cr√©er le compte
    // ========================================
    console.log(`\n${'‚îÅ'.repeat(60)}`)
    console.log(`üìç √âTAPE 1: SIGNUP - Cr√©ation du compte`)
    console.log(`${'‚îÅ'.repeat(60)}`)

    await page.goto('http://localhost:3000/auth/signup', {
      waitUntil: 'networkidle',
      timeout: 15000
    })
    await expect(page).toHaveURL(/.*\/auth\/signup/)
    console.log(`  ‚úÖ Page signup charg√©e`)

    // Remplir le formulaire
    await page.fill('input[name="email"]', testEmail)
    console.log(`  ‚úÖ Email: ${testEmail}`)

    await page.fill('input[name="password"]', testPassword)
    console.log(`  ‚úÖ Password: ********`)

    await page.fill('input[name="firstName"]', testFirstName)
    console.log(`  ‚úÖ First name: ${testFirstName}`)

    await page.fill('input[name="lastName"]', testLastName)
    console.log(`  ‚úÖ Last name: ${testLastName}`)

    // Cocher la checkbox des termes
    const checkbox = page.locator('button[role="checkbox"]#terms')
    await checkbox.click()
    console.log(`  ‚úÖ Terms accepted`)

    // Soumettre le formulaire
    const submitButton = page.locator('button[type="submit"]')
    await expect(submitButton).toBeVisible()

    const isEnabled = await submitButton.isEnabled()
    console.log(`  ‚ÑπÔ∏è  Submit button enabled: ${isEnabled}`)

    await submitButton.click({ force: !isEnabled })
    console.log(`  ‚úÖ Formulaire soumis`)

    // Attendre la redirection vers signup-success
    await page.waitForURL(/.*\/auth\/signup-success/, { timeout: 10000 })
    console.log(`  ‚úÖ Redirection vers /auth/signup-success`)

    // V√©rifier le message de succ√®s
    const successMessage = page.locator('text=/email de confirmation/i')
    await expect(successMessage).toBeVisible()
    console.log(`  ‚úÖ Message de succ√®s visible`)

    // ========================================
    // √âTAPE 2: Attendre et r√©cup√©rer le lien de confirmation
    // ========================================
    console.log(`\n${'‚îÅ'.repeat(60)}`)
    console.log(`üìç √âTAPE 2: R√©cup√©ration du lien de confirmation`)
    console.log(`${'‚îÅ'.repeat(60)}`)

    // Attendre que le lien soit captur√© (max 10 secondes)
    let attempts = 0
    while (!confirmationUrl && attempts < 20) {
      await page.waitForTimeout(500)
      attempts++
      if (attempts % 4 === 0) {
        console.log(`  ‚è≥ Waiting for confirmation URL... (${attempts * 0.5}s)`)
      }
    }

    if (!confirmationUrl) {
      console.error(`\n‚ùå ERREUR: Impossible de capturer le lien de confirmation`)
      console.error(`  ‚Üí V√©rifiez les logs serveur pour [SIGNUP-ACTION]`)

      // Essayer de r√©cup√©rer le lien depuis Supabase directement
      console.log(`\n‚ö†Ô∏è  Tentative de r√©cup√©ration manuelle du lien...`)
      console.log(`  ‚Üí Allez dans Supabase Dashboard ‚Üí SQL Editor`)
      console.log(`  ‚Üí Ex√©cutez: SELECT properties FROM auth.users WHERE email = '${testEmail}'`)

      throw new Error('Lien de confirmation non captur√©')
    }

    console.log(`  ‚úÖ Lien de confirmation captur√©`)
    console.log(`  üîó URL: ${confirmationUrl}`)

    // ========================================
    // √âTAPE 3: CONFIRMATION - Visiter le lien
    // ========================================
    console.log(`\n${'‚îÅ'.repeat(60)}`)
    console.log(`üìç √âTAPE 3: CONFIRMATION - Visite du lien email`)
    console.log(`${'‚îÅ'.repeat(60)}`)

    await page.goto(confirmationUrl, {
      waitUntil: 'networkidle',
      timeout: 15000
    })
    console.log(`  ‚úÖ Lien de confirmation visit√©`)

    // Attendre la redirection vers /auth/login?confirmed=true
    await page.waitForURL(/.*\/auth\/login\?confirmed=true/, { timeout: 10000 })
    console.log(`  ‚úÖ Redirection vers /auth/login?confirmed=true`)

    // V√©rifier le message de confirmation
    const confirmedMessage = page.locator('text=/email confirm√©/i, text=/confirmation/i')
    await expect(confirmedMessage).toBeVisible({ timeout: 5000 })
    console.log(`  ‚úÖ Message de confirmation visible`)

    // ========================================
    // √âTAPE 4: V√âRIFICATION - Profil cr√©√© dans la base
    // ========================================
    console.log(`\n${'‚îÅ'.repeat(60)}`)
    console.log(`üìç √âTAPE 4: V√âRIFICATION - Profil et √©quipe cr√©√©s`)
    console.log(`${'‚îÅ'.repeat(60)}`)

    console.log(`  ‚ÑπÔ∏è  Pour v√©rifier manuellement dans Supabase:`)
    console.log(``)
    console.log(`  -- Voir les logs du trigger`)
    console.log(`  SELECT * FROM public.trigger_debug_logs`)
    console.log(`  WHERE email = '${testEmail}'`)
    console.log(`  ORDER BY created_at ASC;`)
    console.log(``)
    console.log(`  -- V√©rifier le profil`)
    console.log(`  SELECT u.*, t.name as team_name`)
    console.log(`  FROM public.users u`)
    console.log(`  LEFT JOIN public.teams t ON u.team_id = t.id`)
    console.log(`  WHERE u.email = '${testEmail}';`)
    console.log(``)

    // Pause de 2 secondes pour laisser le trigger s'ex√©cuter
    console.log(`  ‚è≥ Pause de 2s pour laisser le trigger s'ex√©cuter...`)
    await page.waitForTimeout(2000)
    console.log(`  ‚úÖ Trigger devrait √™tre termin√©`)

    // ========================================
    // √âTAPE 5: LOGIN - Se connecter avec le nouveau compte
    // ========================================
    console.log(`\n${'‚îÅ'.repeat(60)}`)
    console.log(`üìç √âTAPE 5: LOGIN - Connexion avec le nouveau compte`)
    console.log(`${'‚îÅ'.repeat(60)}`)

    // Remplir le formulaire de login
    await page.fill('input[name="email"]', testEmail)
    console.log(`  ‚úÖ Email filled: ${testEmail}`)

    await page.fill('input[name="password"]', testPassword)
    console.log(`  ‚úÖ Password filled: ********`)

    // Soumettre le formulaire de login
    const loginButton = page.locator('button[type="submit"]')
    await expect(loginButton).toBeVisible()
    await loginButton.click()
    console.log(`  ‚úÖ Login form submitted`)

    // Attendre la redirection vers le dashboard
    await page.waitForURL(/.*\/dashboard/, { timeout: 15000 })
    const finalUrl = page.url()
    console.log(`  ‚úÖ Redirection vers: ${finalUrl}`)

    // ========================================
    // √âTAPE 6: DASHBOARD - V√©rifier l'acc√®s
    // ========================================
    console.log(`\n${'‚îÅ'.repeat(60)}`)
    console.log(`üìç √âTAPE 6: DASHBOARD - V√©rification de l'acc√®s`)
    console.log(`${'‚îÅ'.repeat(60)}`)

    // V√©rifier qu'on est bien sur le dashboard gestionnaire
    expect(finalUrl).toContain('/dashboard/gestionnaire')
    console.log(`  ‚úÖ URL correcte: /dashboard/gestionnaire`)

    // V√©rifier que le nom de l'utilisateur est affich√©
    const userName = page.locator(`text=/${testFirstName}|${testLastName}|${testFirstName} ${testLastName}/i`).first()
    await expect(userName).toBeVisible({ timeout: 5000 })
    console.log(`  ‚úÖ Nom d'utilisateur visible dans l'interface`)

    // V√©rifier qu'il n'y a pas d'erreur affich√©e
    const errorMessages = page.locator('text=/error|erreur|√©chec/i')
    const errorCount = await errorMessages.count()
    if (errorCount > 0) {
      console.warn(`  ‚ö†Ô∏è  ${errorCount} message(s) d'erreur d√©tect√©(s)`)
    } else {
      console.log(`  ‚úÖ Aucun message d'erreur`)
    }

    // ========================================
    // SUCC√àS FINAL
    // ========================================
    console.log(`\n${'='.repeat(60)}`)
    console.log(`‚úÖ TEST E2E COMPLET R√âUSSI !`)
    console.log(`${'='.repeat(60)}`)
    console.log(`üìß Compte cr√©√©: ${testEmail}`)
    console.log(`‚úÖ Email confirm√©`)
    console.log(`‚úÖ Login r√©ussi`)
    console.log(`‚úÖ Dashboard accessible`)
    console.log(`${'='.repeat(60)}\n`)

    // Attendre 3 secondes pour observer le dashboard
    console.log(`‚è∏Ô∏è  Pause de 3s pour observer le dashboard...`)
    await page.waitForTimeout(3000)
  })
})
