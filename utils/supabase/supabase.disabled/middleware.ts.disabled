/**
 * ‚ö° SUPABASE MIDDLEWARE CLIENT (SSR 2025 Compliant)
 *
 * Client sp√©cialis√© pour le middleware Next.js
 * G√®re le refresh automatique des tokens d'authentification
 *
 * Documentation: https://supabase.com/docs/guides/auth/server-side/nextjs
 */

// üîß POLYFILL OBLIGATOIRE: Charge les polyfills avant Supabase
import '@/lib/polyfills'

import { createServerClient } from '@supabase/ssr'
import { NextRequest, NextResponse } from 'next/server'
import type { Database } from '@/lib/database.types'

export function createClient(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => {
            request.cookies.set(name, value)
            supabaseResponse.cookies.set(name, value, options)
          })
        },
      },
    }
  )

  return { supabase, response: supabaseResponse }
}

/**
 * Fonction helper pour rafra√Æchir la session utilisateur dans le middleware
 * Selon les recommandations officielles Supabase SSR
 * OPTIMIS√â POUR EDGE RUNTIME - √âvite les APIs Node.js
 */
export async function refreshUserSession(request: NextRequest) {
  try {
    const { supabase, response } = createClient(request)

    // Rafra√Æchir la session - cette op√©ration met √† jour automatiquement les cookies
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()

    // Log minimal compatible Edge Runtime (sans APIs Node.js)
    // Pas de logging c√¥t√© middleware pour √©viter les warnings Edge Runtime

    return { user, response, supabase }
  } catch (error) {
    // Gestion d'erreur robuste pour Edge Runtime
    const fallbackResponse = NextResponse.next({ request })
    return {
      user: null,
      response: fallbackResponse,
      supabase: null,
      error: error instanceof Error ? error.message : 'Unknown middleware error'
    }
  }
}