import { NextRequest, NextResponse } from "next/server"
import { emailService } from "@/lib/email/email-service"
import { logger } from '@/lib/logger'
import { getApiAuthContext } from '@/lib/api-auth-helper'
import { changePasswordSchema, validateRequest, formatZodErrors } from '@/lib/validation/schemas'

/**
 * POST /api/change-password
 * Permet √† un utilisateur authentifi√© de changer son mot de passe
 * Requiert le mot de passe actuel pour validation de s√©curit√©
 */
export async function POST(request: NextRequest) {
  try {
    // ‚úÖ AUTH: 29 lignes ‚Üí 3 lignes! (centralis√© dans getApiAuthContext)
    const authResult = await getApiAuthContext()
    if (!authResult.success) return authResult.error

    const { supabase, authUser } = authResult.data

    // R√©cup√©rer les donn√©es du body
    const body = await request.json()

    // ‚úÖ ZOD VALIDATION: Type-safe input validation avec s√©curit√© renforc√©e
    const validation = validateRequest(changePasswordSchema, body)
    if (!validation.success) {
      logger.warn({ errors: formatZodErrors(validation.errors) }, '‚ö†Ô∏è [CHANGE-PASSWORD] Validation failed')
      return NextResponse.json({
        error: "Donn√©es invalides",
        details: formatZodErrors(validation.errors)
      }, { status: 400 })
    }

    const { currentPassword, newPassword } = validation.data

    // V√©rifier que le nouveau mot de passe est diff√©rent de l'actuel
    if (currentPassword === newPassword) {
      return NextResponse.json({
        error: "Le nouveau mot de passe doit √™tre diff√©rent du mot de passe actuel"
      }, { status: 400 })
    }

    logger.info({ user: authUser.email }, "üîí [CHANGE-PASSWORD] Validating current password for user:")

    // √âtape 1: V√©rifier le mot de passe actuel en tentant une connexion
    const { error: signInError } = await supabase.auth.signInWithPassword({
      email: authUser.email!,
      password: currentPassword
    })

    if (signInError) {
      logger.info({ signInError: signInError.message }, "‚ùå [CHANGE-PASSWORD] Current password validation failed:")
      return NextResponse.json({ 
        error: "Le mot de passe actuel est incorrect" 
      }, { status: 400 })
    }

    logger.info({}, "‚úÖ [CHANGE-PASSWORD] Current password validated successfully")

    // √âtape 2: Mettre √† jour le mot de passe avec Supabase Auth
    logger.info({}, "üîÑ [CHANGE-PASSWORD] Updating password...")
    const { error: updateError } = await supabase.auth.updateUser({
      password: newPassword
    })

    if (updateError) {
      logger.error({ error: updateError.message }, "‚ùå [CHANGE-PASSWORD] Error updating password:")
      return NextResponse.json({ 
        error: "Erreur lors de la mise √† jour du mot de passe: " + updateError.message 
      }, { status: 500 })
    }

    logger.info({}, "‚úÖ [CHANGE-PASSWORD] Password updated successfully")

    // ‚úÖ NOUVEAU: Envoyer email de confirmation via Resend
    try {
      const firstName = authUser.user_metadata?.first_name || authUser.email?.split('@')[0] || 'Utilisateur'
      const emailResult = await emailService.sendPasswordChangedEmail(authUser.email!, {
        firstName,
        changeDate: new Date(),
      })

      if (emailResult.success) {
        logger.info({ emailResult: emailResult.emailId }, '‚úÖ [CHANGE-PASSWORD] Confirmation email sent via Resend:')
      } else {
        logger.warn({ emailResult: emailResult.error }, '‚ö†Ô∏è [CHANGE-PASSWORD] Failed to send confirmation email:')
      }
    } catch (emailError) {
      // Ne pas bloquer le changement de mot de passe si l'email √©choue
      logger.error({ error: emailError }, '‚ùå [CHANGE-PASSWORD] Email sending error:')
    }

    // Retourner le succ√®s
    return NextResponse.json({
      message: "Mot de passe modifi√© avec succ√®s"
    }, { status: 200 })

  } catch (error) {
    logger.error({ error: error }, "‚ùå [CHANGE-PASSWORD] Unexpected error:")
    return NextResponse.json({ 
      error: "Erreur interne du serveur" 
    }, { status: 500 })
  }
}
