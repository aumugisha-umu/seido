-- ============================================
-- üîç DIAGNOSTIC COMPLET: Pourquoi le trigger ne cr√©e pas le profil?
-- ============================================
-- √Ä ex√©cuter dans Supabase Dashboard > SQL Editor
-- ============================================

-- ============================================
-- 1Ô∏è‚É£ V√âRIFIER QUE LE TRIGGER EXISTE
-- ============================================
SELECT
  trigger_name,
  event_manipulation,
  event_object_table,
  action_statement,
  action_timing,
  action_orientation
FROM information_schema.triggers
WHERE trigger_name = 'on_auth_user_confirmed';

-- ‚úÖ R√©sultat attendu: 1 ligne avec trigger_name = 'on_auth_user_confirmed'
-- ‚ùå Si vide: Le trigger n'existe pas ‚Üí besoin de le d√©ployer

-- ============================================
-- 2Ô∏è‚É£ V√âRIFIER QUE LA FONCTION EXISTE
-- ============================================
SELECT
  proname as function_name,
  prosecdef as is_security_definer,
  provolatile as volatility
FROM pg_proc
WHERE proname = 'handle_new_user_confirmed';

-- ‚úÖ R√©sultat attendu: 1 ligne avec function_name = 'handle_new_user_confirmed'
-- ‚ùå Si vide: La fonction n'existe pas ‚Üí besoin de la d√©ployer

-- ============================================
-- 3Ô∏è‚É£ V√âRIFIER L'√âTAT DE L'UTILISATEUR DANS auth.users
-- ============================================
-- ‚ö†Ô∏è REMPLACEZ 'votre.email@example.com' PAR L'EMAIL DU TEST
SELECT
  id,
  email,
  email_confirmed_at,
  created_at,
  updated_at,
  raw_user_meta_data->>'first_name' as first_name,
  raw_user_meta_data->>'last_name' as last_name,
  raw_user_meta_data->>'role' as role,
  raw_user_meta_data->>'team_id' as team_id
FROM auth.users
WHERE email = 'votre.email@example.com';

-- ‚úÖ Si email_confirmed_at IS NOT NULL ‚Üí confirmation OK
-- ‚ùå Si email_confirmed_at IS NULL ‚Üí confirmation n'a pas eu lieu
-- ‚úÖ Si first_name, last_name, role existent ‚Üí metadata OK
-- ‚ùå Si NULL ‚Üí metadata manquantes (trigger ne peut pas cr√©er profil)

-- ============================================
-- 4Ô∏è‚É£ V√âRIFIER SI LE PROFIL EXISTE DANS public.users
-- ============================================
-- ‚ö†Ô∏è REMPLACEZ l'UUID par l'id de auth.users ci-dessus
SELECT
  id,
  auth_user_id,
  email,
  name,
  role,
  team_id,
  created_at
FROM public.users
WHERE auth_user_id = 'UUID-DE-AUTH-USER';

-- ‚úÖ Si 1 ligne ‚Üí profil cr√©√© avec succ√®s
-- ‚ùå Si vide ‚Üí trigger a √©chou√© ou n'a pas √©t√© ex√©cut√©

-- ============================================
-- 5Ô∏è‚É£ V√âRIFIER SI L'√âQUIPE EXISTE DANS public.teams
-- ============================================
-- ‚ö†Ô∏è REMPLACEZ l'UUID par le team_id de public.users ci-dessus
SELECT
  id,
  name,
  created_at
FROM public.teams
WHERE id = 'UUID-DE-TEAM';

-- ‚úÖ Si 1 ligne ‚Üí √©quipe cr√©√©e avec succ√®s
-- ‚ùå Si vide ‚Üí √©quipe non cr√©√©e (v√©rifier team_id dans metadata)

-- ============================================
-- 6Ô∏è‚É£ V√âRIFIER LES CONTRAINTES SUR public.users
-- ============================================
SELECT
  tc.constraint_name,
  tc.constraint_type,
  kcu.column_name,
  ccu.table_name AS foreign_table_name,
  ccu.column_name AS foreign_column_name
FROM information_schema.table_constraints AS tc
JOIN information_schema.key_column_usage AS kcu
  ON tc.constraint_name = kcu.constraint_name
  AND tc.table_schema = kcu.table_schema
LEFT JOIN information_schema.constraint_column_usage AS ccu
  ON ccu.constraint_name = tc.constraint_name
  AND ccu.table_schema = tc.table_schema
WHERE tc.table_name = 'users'
  AND tc.table_schema = 'public';

-- üîç Identifier les contraintes NOT NULL et FOREIGN KEY qui pourraient bloquer
-- Colonnes critiques √† v√©rifier: team_id, auth_user_id, email, name, role

-- ============================================
-- 7Ô∏è‚É£ V√âRIFIER LES POLITIQUES RLS SUR public.users
-- ============================================
SELECT
  schemaname,
  tablename,
  policyname,
  permissive,
  roles,
  cmd,
  qual,
  with_check
FROM pg_policies
WHERE tablename = 'users'
  AND schemaname = 'public';

-- üîç V√©rifier qu'il n'y a pas de politique RLS qui bloque les INSERT
-- Le trigger s'ex√©cute avec SECURITY DEFINER donc devrait bypass RLS

-- ============================================
-- 8Ô∏è‚É£ V√âRIFIER SI RLS EST ACTIV√â SUR public.users
-- ============================================
SELECT
  schemaname,
  tablename,
  rowsecurity
FROM pg_tables
WHERE tablename = 'users'
  AND schemaname = 'public';

-- ‚úÖ Si rowsecurity = true ‚Üí RLS activ√© (normal)
-- üîç V√©rifier que le trigger utilise SECURITY DEFINER pour bypass RLS

-- ============================================
-- 9Ô∏è‚É£ TEST MANUEL: SIMULER LA CR√âATION D'UN PROFIL
-- ============================================
-- ‚ö†Ô∏è NE PAS EX√âCUTER SI VOUS AVEZ UN VRAI UTILISATEUR
-- Ceci teste si la logique de cr√©ation fonctionne manuellement
/*
DO $$
DECLARE
  test_auth_user_id uuid := 'UUID-DE-AUTH-USER'; -- REMPLACER
  test_email text := 'test@example.com';
  test_first_name text := 'Test';
  test_last_name text := 'User';
  test_role text := 'gestionnaire';
  v_team_id uuid;
BEGIN
  -- Cr√©er une √©quipe de test
  INSERT INTO public.teams (name)
  VALUES (test_first_name || ' ' || test_last_name || '''s Team')
  RETURNING id INTO v_team_id;

  -- Cr√©er un profil de test
  INSERT INTO public.users (
    auth_user_id,
    email,
    name,
    role,
    team_id,
    avatar_url,
    phone
  ) VALUES (
    test_auth_user_id,
    test_email,
    test_first_name || ' ' || test_last_name,
    test_role,
    v_team_id,
    NULL,
    NULL
  );

  RAISE NOTICE 'Test r√©ussi: team_id = %, profil cr√©√©', v_team_id;
END $$;
*/

-- ============================================
-- üîü V√âRIFIER LES LOGS POSTGRESQL (si acc√®s)
-- ============================================
-- ‚ö†Ô∏è Peut ne pas fonctionner selon les permissions Supabase
/*
SELECT
  log_time,
  message
FROM pg_stat_statements
WHERE query LIKE '%handle_new_user_confirmed%'
ORDER BY log_time DESC
LIMIT 10;
*/

-- ============================================
-- üìä R√âSUM√â DU DIAGNOSTIC
-- ============================================
-- Ex√©cutez chaque requ√™te ci-dessus dans l'ordre
-- Notez les r√©sultats pour chaque √©tape
-- Les r√©sultats permettront d'identifier:
-- - Si le trigger/fonction existe (√©tapes 1-2)
-- - Si la confirmation a eu lieu (√©tape 3)
-- - Si le profil a √©t√© cr√©√© (√©tape 4)
-- - Si l'√©quipe a √©t√© cr√©√©e (√©tape 5)
-- - Les contraintes qui pourraient bloquer (√©tape 6)
-- - Les politiques RLS qui pourraient bloquer (√©tapes 7-8)
-- - Si la logique de cr√©ation fonctionne manuellement (√©tape 9)
