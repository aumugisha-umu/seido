name: SEIDO Tests

on:
  push:
    branches: [main, develop, preview]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Variables d'environnement globales pour les tests
env:
  NODE_ENV: test
  # ‚ö†Ô∏è Configurer ces secrets dans GitHub Settings > Secrets
  # NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
  # NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
  # SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}

jobs:
  # Job 1: Tests unitaires et composants (Vitest)
  vitest-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all Vitest tests
        run: npm run test:run

      - name: Generate coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: seido-vitest-tests
        continue-on-error: true

  # Job 2: Tests E2E (Playwright)
  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.json
          retention-days: 7

  # Job 3: Build et Lint
  build-check:
    name: Build & Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint

      - name: Build application
        run: npm run build
        env:
          # Variables d'environnement pour le build
          NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder-key

  # Job 4: Lighthouse (Pull Requests uniquement)
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder-key

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse audit
        run: npm run lighthouse

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.json
          retention-days: 7

  # Job 5: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [vitest-tests, e2e-tests, build-check]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "üìä Test Results Summary"
          echo "======================="
          echo "Vitest tests: ${{ needs.vitest-tests.result }}"
          echo "E2E tests: ${{ needs.e2e-tests.result }}"
          echo "Build check: ${{ needs.build-check.result }}"
          echo ""

      - name: Report success
        if: ${{ needs.vitest-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.build-check.result == 'success' }}
        run: echo "‚úÖ All tests passed successfully!"

      - name: Report failure
        if: ${{ needs.vitest-tests.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.build-check.result == 'failure' }}
        run: |
          echo "‚ùå Some tests failed. Please check the individual job logs above."
          exit 1
